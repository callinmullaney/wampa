////////////////////////////////////////////////////////////////////////////////
// MIXINS
// -----------------------------------------------------------------------------

//////////////////
//typography
/////////////////
@mixin header-size($type) {
  @include breakpoint(medium) {
    font-size: rem-calc(map-get(map-get($header-sizes, 'medium'), $type) * 1px);
  }

  font-size: rem-calc(map-get(map-get($header-sizes, 'small'), $type) * 1px);
}

//////////////////////
// Gradient
//////////////////////
@mixin linear-gradient($color1, $color2, $direction) {
  background-color: $color1; /* Old browsers */
  background: linear-gradient(to $direction, $color1 0%, $color2 100%);
}

@mixin radial-gradient($center, $edge) {
  background-color: $edge;
  background: radial-gradient(ellipse at center, $center 0%, $edge 75%);
}

//////////////////
//button styles - Defines base button styles
//////////////////
@mixin button-style($outline: false, $reverse: false, $large: false) {
  @include linear-gradient($blue-light, darken($blue-light, 10%), bottom);

  &:hover {
    @include linear-gradient(lighten($blue-light, 5%), $blue-light, bottom);
  }

  @if $large == true {
    font-size: rem-calc(15);
    padding: ($button-padding * 0.75) ($button-padding * 2.25);
  }

  @if $outline == true {
    @include linear-gradient(rgba($white, 0.1), rgba($white, 0.5), bottom);
    color: $primary-color;

    &:visited,
    &:active,
    &:focus {
      color: darken($primary-color, 15%);
    }

    &:hover {
      @include linear-gradient(rgba($white, 0.1), darken($white, 15%), bottom);
      color: darken($primary-color, 15%);
    }
  }

  @if $reverse == true {
    @include linear-gradient($white, darken($white, 5%), bottom);
    color: $primary-color;
    border: 1px solid $white;

    &:visited,
    &:active,
    &:focus {
      color: $primary-color;
    }

    &:hover {
      @include linear-gradient($white, darken($white, 15%), bottom);
      border-color: darken($white, 15%);
      color: $primary-color;
    }

    @if $outline == true {
      @include linear-gradient(rgba($white, 0.1), rgba($white, 0.4), bottom);
      color: $blue-light;
      border: 1px solid rgba($white, 0.5);

      &:visited,
      &:active,
      &:focus {
        color: $white;
      }

      &:hover {
        @include linear-gradient(rgba($blue-light, 0.1), $blue-light, bottom);
        border-color: rgba($blue-light, 0.6);
        color: $white;
      }
    }
  }

  @content;
}

//////////////////////
// overlay psuedo element
//////////////////////
@mixin overlay($color, $after: false) {

  @if $after == false {
    &::before {
      display: block;
      position: absolute;
      top: 0;
      content: '';
      width: 100%;
      height: 100%;
      background-color: rgba($color, 0.66);
      z-index: 1;
    }
  }

  @if $after == true {
    &::after {
      display: block;
      position: absolute;
      top: 0;
      content: '';
      width: 100%;
      height: 100%;
      background-color: rgba($color, 0.66);
      z-index: 1;
    }
  }
}

//////////////////////
// Content Spacing
//////////////////////
@mixin content-margin-gap($side: false) {
  @include content-margin-gap-top();
  @include content-margin-gap-bottom();

  @include breakpoint(medium) {
    @if $side {
      margin-left: $global-margin / 2;
      margin-right: $global-margin / 2;
    }
  }
}

@mixin content-margin-gap-top() {
  margin-top: $global-margin * 3;

  @include breakpoint(medium) {
    margin-top: $global-margin * 5;
  }
}

@mixin content-margin-gap-bottom() {
  margin-bottom: $global-margin * 3;

  @include breakpoint(medium) {
    margin-bottom: $global-margin * 5;
  }
}

@mixin content-padding-gap($side: false) {
  padding-top: $global-padding * 3;
  padding-bottom: $global-padding * 3;

  @include breakpoint(medium) {
    padding-top: $global-padding * 4;
    padding-bottom: $global-padding * 4;

    @if $side {
      padding-left: $global-padding / 2;
      padding-right: $global-padding / 2;
    }
  }
}

//////////////////////
// fontawesome icon
//////////////////////
@mixin icon($position: before, $icon: false, $icon-set: fa, $styles: true) {
  @if $position == both {
    $position: 'before, &:after';
  }
  // Either a :before or :after pseudo-element, or both, defaulting to :before
  &:#{$position} {
    @if $icon {
      // A particular icon has been specified
      content: "#{map-get($icons, $icon)}";
    }
    @if $styles {
      // Supportive icon styles required
      speak: none;
      font-style: normal;
      font-weight: normal;
      font-variant: normal;
      text-transform: none;
      font-family: $icon-set;
    }
    // Include any extra rules supplied for the pseudo-element
    @content;
  }
}
// f=fontawesome icons
// e=material
// icon font codes
$icons: (
  facebook: '\f09a',
  twitter: '\f099',
  linkedin: '\f0e1',
  googleplus: '\f0d5',
  pinterest: '\f231',
  instagram: '\f16d',
  search: '\f002',
  plus: '\e114',
  close: '\f00d',
  arrow-left: '\e314',
  arrow-right: '\e315',
  pdf: '\f1c1',
  add-file: '\f093',
  lock: '\f023',
  edit: '\f044',
  delete: '\f1f8',
  revisions: '\f01e',
  active: '\f06e',
  devel: '\f121',
  menu: '\f039',
  more: '\f105',
  tag: '\f02b',
  folder: '\f07b',
  file: '\f15b',
  info: '\f05a',
  shopping-cart: '\f07a',
  shopping-bag: '\f290',
  shopping-basket: '\f291',
  print: '\f02f',
);
